<?xml version="1.0"?>
<!--

    Copyright 2016 Liam Williams <liam.williams@zoho.com>.

    This file is part of coffee.

    coffee is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    coffee is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with coffee.  If not, see <http://www.gnu.org/licenses/>.

-->
<ruleset
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Android Application Rules"
        xmlns="http://pmd.sf.net/ruleset/1.0.0"
        xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd"
        xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">

    <description>PMD rules to check for</description>

    <rule ref="rulesets/java/basic.xml"/>
    <rule ref="rulesets/java/braces.xml"/>
    <rule ref="rulesets/java/clone.xml"/>
    <rule ref="rulesets/java/codesize.xml"/>
    <rule ref="rulesets/java/controversial.xml">
        <exclude name="CallSuperInConstructor"/><!-- This is pointless when there is a zero argument super constructor -->
        <exclude name="AtLeastOneConstructor"/><!-- This is pointless if an object has no state (e.g. ValueType) -->
        <exclude name="OnlyOneReturn"/><!-- Multiple returns can aid readability and reduce arrow code -->
        <exclude name="DataflowAnomalyAnalysis"/><!-- Too many false positives -->
        <exclude name="AvoidUsingShortType"/><!-- Shorts will be used when e.g. writing class files -->
    </rule>
    <rule ref="rulesets/java/coupling.xml">
        <exclude name="LoosePackageCoupling"/><!-- This rule would be good but you can only configure class excludes not package excludes -->
        <exclude name="LawOfDemeter"/><!-- The Law of Demeter is a good thing to keep in mind, but this rule triggers too many false positives with e.g. fluent interfaces -->
    </rule>
    <rule ref="rulesets/java/design.xml">
        <exclude name="AbstractClassWithoutAbstractMethod"/><!-- Types such as ValueType have no abstract methods but should always be extended -->
        <exclude name="UseUtilityClass"/><!-- Classes with all static methods are fine, adding a private constructor to each one is overkill because of the boilerplate -->
    </rule>
    <rule ref="rulesets/java/empty.xml"/>
    <rule ref="rulesets/java/finalizers.xml"/>
    <rule ref="rulesets/java/imports.xml"/>
    <rule ref="rulesets/java/junit.xml">
        <exclude name="TestClassWithoutTestCases"/><!-- This rule assumes test methods start with testXXX -->
        <exclude name="JUnitTestContainsTooManyAsserts"/><!-- Multiple asserts can form one logical assertion -->
        <exclude name="JUnitTestsShouldIncludeAssert"/><!-- This rule doesn't consider verification an assertion -->
    </rule>
    <rule ref="rulesets/java/logging-java.xml"/>
    <rule ref="rulesets/java/naming.xml">
        <exclude name="LongVariable"/><!-- There is nothing wrong with long descriptive variable names! -->
        <exclude name="GenericsNaming"/><!-- Single letter generic names are not descriptive enough, especially if there are several of them -->
        <exclude name="AbstractNaming"/><!-- Abstract classes should be called something descriptive, not just AbstractXXX -->
        <exclude name="AvoidFieldNameMatchingMethodName"/><!-- Field name matching method name is a good thing if they represent the same concept -->
    </rule>
    <rule ref="rulesets/java/optimizations.xml">
        <exclude name="MethodArgumentCouldBeFinal"/><!-- Final method arguments are not a way to improve performance since the final keyword does not end up in the class file -->
        <exclude name="LocalVariableCouldBeFinal"/><!-- Final variables are not a way to improve performance since the final keyword does not end up in the class file -->
    </rule>
    <rule ref="rulesets/java/strictexception.xml"/>
    <rule ref="rulesets/java/strings.xml">
        <exclude name="AvoidDuplicateLiterals"/><!-- In general this is a good thing, but this rule has too many false positives -->
    </rule>
    <rule ref="rulesets/java/sunsecure.xml"/>
    <rule ref="rulesets/java/typeresolution.xml"/>
    <rule ref="rulesets/java/unnecessary.xml"/>
    <rule ref="rulesets/java/unusedcode.xml"/>
</ruleset>